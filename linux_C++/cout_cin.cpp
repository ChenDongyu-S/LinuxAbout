/*
输入输出：
	标准输入流：stdin/cin
	标准输出流：stdout/cout
		数据有缓冲，在缓冲区满，程序正常退出，流被关闭或强制刷新（fflush()函数）时输出
		等到缓冲区满后同时打印多个句号：while(1){
		printf(".");sleep(1);
		}
	标准错误流：stderr/cerr
		数据无缓冲，直接输出
		每秒打印一个句话：while(1){fprintf(stderr,".");sleep(1);}
		
		
		
		
	文件描述符：
	目的与意义：在程序中代表文件
		内核为每一个进程维护一个文件打开记录表，文件描述符为该文件在表中的索引值
	文件描述符为非负整数，范围从0到OPEN_MAX
		不同操作系统可能具有不同范围，可以同时打开的文件数目不一样
	文件描述符的缺点：
		非unix/linux系统可能没有文件描述符的概念，跨平台编程时建议使用C/C++标准库函数和文件流类
		
		
		
	预定义的标准输入输出流的文件描述符
		标准输入流：stdin:STDIN_FILENO(1)
		标准输出流：stdout:STDOUT_FILENO(1)
		标准错误流：stderr:STDERR_FILENO(1)
	文件描述符的创建
		linux中凡物皆文件，操作系统使用统一方式管理和维护
		很多函数都可以通过打开文件或设备方式创建文件描述符
		
	基本IO函数和高级IO函数
		打开关闭函数：open()和close():前者头文件"fcntl.h",后者头文件"unistd.h"
		读写函数read()和 write()：头文件"unistd"
		读写函数readv()和writev()：头文件"sys/uio.h"
		文件发送函数sendfile()：头文件"sys/sendfile.h"
		数据移动函数splice()：头文件"fcntl.h"
		数据移动函数tee()：头文件"fcntl.h"
		文件控制函数fcntl()：头文件"fcntl.h"
		
		
	
	临时文件
	使用临时文件的注意事项：
		程序多个进程可能同时运行，他们可能应该使用不同的临时文件
		必须小小心设置文件属性，未授权用户不应具有临时文件访问权限
		临时文件的生成应该外部不可预测，否则系统容易受到攻击
		
	linux临时文件函数mkstemp()
		创建名称唯一的临时文件，使用"XXXXXX"作为末班，返回文件描述符
		如果不希望外界看到临时文件，创建临时文件后应该调用unlink()函数将其从目录中删除，单文件本身存在
		文件采用引用计数方式访问；本程序未结束，可用文件描述符访问该文件；文件引用计数降为0，系统自动删除临时文件。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
*/
